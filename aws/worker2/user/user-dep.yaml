apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-user
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spring-user
  template:
    metadata:
      labels:
        app: spring-user
    spec:
      nodeSelector:
        role: worker2  # role=worker1 라벨이 있는 노드에서 실행
      containers:
        - name: spring-user
          image: choissu/ficket:springuser-latest
          ports:
            - containerPort: 8089
          command: ["java",
                    "-Dspring.config.location=file:/config/application-user.yml,file:/config/application-common.yml",
                    "-Dspring.config.import=optional:configserver:",
                    "-Dspring.cloud.config.enabled=false",
                    "-Dspring.cloud.config.import-check.enabled=false",
                    "-jar",
                    "ficket-user-0.0.1-SNAPSHOT.jar"]
          envFrom:
            - configMapRef:
                name: user-config  # user-config ConfigMap을 환경 변수로 로드
            - configMapRef:
                name: common-config  # common-config ConfigMap을 환경 변수로 로드
          env:
            - name: USER_MYSQL_URL
              value: "jdbc:mysql://ec2-3-34-253-101.ap-northeast-2.compute.amazonaws.com/ficket"
            - name: WORKER1_REDIS_HOST
              value: "ec2-52-79-207-181.ap-northeast-2.compute.amazonaws.com"
            - name: WORKER1_REDIS_PORT
              value: "6379"
          volumeMounts:
            - name: common-config-volume
              mountPath: /config/application-common.yml
              subPath: application-common.yml
            - name: user-config-volume
              mountPath: /config/application-user.yml
              subPath: application-user.yml
      volumes:
        - name: common-config-volume
          configMap:
            name: common-config
        - name: user-config-volume
          configMap:
            name: user-config
