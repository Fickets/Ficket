server:
  port: 9000  # 게이트웨이 포트 지정

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

# 게이트웨이 라우팅 설정
spring:
  application:
    name: apigateway-service
  profiles:
    active: local
  config:
    import: optional:configserver:http://localhost:8888
  cloud:
    gateway:
      default-filters:
        - name: GlobalFilter
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins:
              - "http://localhost:5173"
              - "https://your-frontend-domain.com"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - PATCH
            allowedHeaders:
              - "*"
            allowCredentials: true
      routes:
        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/api/v1/users/**

        - id: admin-service
          uri: lb://admin-service
          predicates:
            - Path=/api/v1/admins/login
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/admin-service/(?<segment>.*), /$\{segment}

        - id: admin-service
          uri: lb://admin-service
          predicates:
            - Path=/api/v1/admins/reissue
            - Method=POST
          filters:
            - RewritePath=/admin-service/(?<segment>.*), /$\{segment}

        - id: admin-service
          uri: lb://admin-service
          predicates:
            - Path=/api/v1/admins/join
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/admin-service/(?<segment>.*), /$\{segment}
        - id: admin-service
          uri: lb://admin-service
          predicates:
            - Path=/api/v1/admins/**
          filters:
            - AdminRoleCheckFilter

        - id: event-service
          uri: lb://event-service
          predicates:
            - Path=/api/v1/events/seat/{action}  # 좌석 선점 및 해제
          filters:
            - AuthorizationHeaderFilter
            - UserTokenExtractionFilter
            - RemoveRequestHeader=Cookie
        - id: event-service
          uri: lb://event-service
          predicates:
            - Path=/api/v1/events/admin/**
          filters:
            - AdminRoleCheckFilter
            - RewritePath=/api/v1/events/admin/(?<segment>.*), /api/v1/events/admin/${segment}
            - RemoveRequestHeader=Cookie
        - id: event-service
          uri: lb://event-service
          predicates:
            - Path=/api/v1/events/admins/**
          filters:
            - AdminRoleCheckFilter
            - AdminTokenExtractionFilter
            - RewritePath=/api/v1/events/admins/(?<segment>.*), /api/v1/events/admins/${segment}
            - RemoveRequestHeader=Cookie
        - id: event-service
          uri: lb://event-service
          predicates:
            - Path=/api/v1/events/**
          filters:
            - AuthorizationHeaderFilter
            - RewritePath=/api/v1/events/admin/(?<segment>.*), /api/v1/events/admin/${segment}
            - RemoveRequestHeader=Cookie

        - id: face-service
          uri: lb://face-service
          predicates:
            - Path=/api/v1/faces/**
          filters:
            - name: AuthorizationHeaderFilter

        - id: queue-service
          uri: lb://queue-service
          predicates:
            - Path=/api/v1/queues/**

        - id: ticketing-service
          uri: lb://ticketing-service
          predicates:
            - Path=/api/v1/ticketing/**

encrypt:
  key-store:
    password: test1234
    alias: apiEncryptionKey
    location: classpath:/apiEncryptionKey.jks

management:
  endpoint:
    gateway:
      enabled: true