server:
  port: 9000  # 게이트웨이 포트 지정

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

# 게이트웨이 라우팅 설정
spring:
  application:
    name: apigateway-service
  profiles:
    active: local
  config:
    import: optional:configserver:http://localhost:8888
  cloud:
    gateway:
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins:
              - "http://localhost:5173"
              - "https://your-frontend-domain.com"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - PATCH
              - UPGRADE
            allowedHeaders:
              - "*"
            allowCredentials: true
      routes:
        # USER SERVICE
        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/user-service/actuator/**
            - Method=GET,POST
          filters:
            - RewritePath=/user-service/(?<segment>.*), /${segment}
        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/api/v1/users/my-ticket
          filters:
            - AuthorizationHeaderFilter
            - UserTokenExtractionFilter
        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/api/v1/users/**
        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/user-swagger/v3/api-docs
        # ADMIN SERVICE
        - id: admin-service
          uri: lb://admin-service
          predicates:
            - Path=/admin-service/actuator/**
            - Method=GET,POST
          filters:
            - RewritePath=/admin-service/(?<segment>.*), /${segment}
        - id: admin-service
          uri: lb://admin-service
          predicates:
            - Path=/api/v1/admins/login
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/admin-service/(?<segment>.*), /$\{segment}

        - id: admin-service
          uri: lb://admin-service
          predicates:
            - Path=/api/v1/admins/reissue
            - Method=POST
          filters:
            - RewritePath=/admin-service/(?<segment>.*), /$\{segment}

        - id: admin-service
          uri: lb://admin-service
          predicates:
            - Path=/api/v1/admins/join
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/admin-service/(?<segment>.*), /$\{segment}
        - id: admin-service
          uri: lb://admin-service
          predicates:
            - Path=/api/v1/admins/**
          filters:
            - AdminRoleCheckFilter
        - id: admin-service
          uri: lb://admin-service
          predicates:
            - Path=/api/v1/settlements
        - id: admin-service
          uri: lb://admin-service
          predicates:
            - Path=/api/v1/settlements/**
        - id: admin-service
          uri: lb://admin-service
          predicates:
            - Path=/api/v1/settlements/list/**
        - id: admin-service
          uri: lb://admin-service
          predicates:
            - Path=/admin-swagger/v3/api-docs
        # EVENT-SERVICE
        - id: event-service
          uri: lb://event-service
          predicates:
            - Path=/event-service/actuator/**
            - Method=GET,POST
          filters:
            - RewritePath=/event-service/(?<segment>.*), /${segment}
        - id: event-service
          uri: lb://event-service
          predicates:
            - Path=/event-swagger/v3/api-docs
        - id: event-service
          uri: lb://event-service
          predicates:
            - Path=/api/v1/events/customer-ticket-info
        - id: event-service
          uri: lb://event-service
          predicates:
            - Path=/api/v1/events/open-recent
        - id: event-service
          uri: lb://event-service
          predicates:
            - Path=/api/v1/events/genre-rank
        - id: event-service
          uri: lb://event-service
          predicates:
            - Path=/api/v1/events/genre-search
        - id: event-service
          uri: lb://event-service
          predicates:
            - Path=/api/v1/events/area
        - id: event-service
          uri: lb://event-service
          predicates:
            - Path=/api/v1/events/statistic/**
        - id: event-service
          uri: lb://event-service
          predicates:
            - Path=/api/v1/events/seat/{action}  # 좌석 선점 및 해제
          filters:
            - AuthorizationHeaderFilter #
            - UserTokenExtractionFilter # 토큰 pk 사용할떄 이거 넣으면 header에서 사용 가능
            - RemoveRequestHeader=Cookie
        - id: event-service
          uri: lb://event-service
          predicates:
            - Path=/api/v1/events/admin/**
          filters:
            - AdminRoleCheckFilter
            - RewritePath=/api/v1/events/admin/(?<segment>.*), /api/v1/events/admin/${segment}
            - RemoveRequestHeader=Cookie
        - id: event-service
          uri: lb://event-service
          predicates:
            - Path=/api/v1/events/admins/**
          filters:
            - AdminRoleCheckFilter # 관리자가 쓰는 필터
            - AdminTokenExtractionFilter # admin PK 필요하면
            - RewritePath=/api/v1/events/admins/(?<segment>.*), /api/v1/events/admins/${segment}
            - RemoveRequestHeader=Cookie
        - id: event-service
          uri: lb://event-service
          predicates:
            - Path=/api/v1/events/detail/**
        - id: event-service
          uri: lb://event-service
          predicates:
            - Path=/api/v1/events/**
          filters:
            - AuthorizationHeaderFilter
            - RewritePath=/api/v1/events/admin/(?<segment>.*), /api/v1/events/admin/${segment}
            - RemoveRequestHeader=Cookie

        # FACE-SERVICE
        - id: face-service
          uri: lb://face-service
          predicates:
            - Path=/face-service/actuator/**
            - Method=GET,POST
          filters:
            - RewritePath=/face-service/(?<segment>.*), /${segment}
#        - id: face-service
#          uri: lb://face-service
#          predicates:
#            - Path=/swagger.json
        - id: face-service
          uri: lb://face-service
          predicates:
            - Path=/api/v1/faces/**
          filters:
            - name: AuthorizationHeaderFilter

        # QUEUE-SERVICE
        - id: websocket-route
          uri: lb:ws://queue-service
          predicates:
            - Path=/queue-status/**
          filters:
            - PreserveHostHeader=true
            - QueryTokenExtractionFilter
            - RemoveRequestParameter=Authorization
        - id: websocket-route
          uri: lb:ws://queue-service
          predicates:
            - Path=/work-status/**
          filters:
            - QueryTokenExtractionFilter
            - RemoveRequestParameter=Authorization
        - id: queue-service
          uri: lb://queue-service
          predicates:
            - Path=/queue-service/actuator/**
            - Method=GET,POST
          filters:
            - RewritePath=/queue-service/(?<segment>.*), /${segment}
        - id: queue-service
          uri: lb://queue-service
          predicates:
            - Path=/api/v1/queues/**
          filters:
            - AuthorizationHeaderFilter
            - UserTokenExtractionFilter
        - id: queue-service
          uri: lb://queue-service
          predicates:
            - Path=/queue-swagger/v3/api-docs

        # TICKETING-SERVICE
        - id: ticketing-service
          uri: lb://ticketing-service
          predicates:
            - Path=/ticketing-service/actuator/**
            - Method=GET,POST
          filters:
            - RewritePath=/ticketing-service/(?<segment>.*), /${segment}
        - id: ticketing-service
          uri: lb://ticketing-service
          predicates:
            - Path=/api/v1/ticketing/order
            - Method=POST
          filters:
            - AuthorizationHeaderFilter
            - UserTokenExtractionFilter
        - id: ticketing-service
          uri: lb://ticketing-service
          predicates:
            - Path=/api/v1/ticketing/order/enter-ticketing/{eventScheduleId:\d+}
            - Method=GET
          filters:
            - AuthorizationHeaderFilter
            - UserTokenExtractionFilter
        - id: ticketing-service
          uri: lb://ticketing-service
          predicates:
            - Path=/api/v1/ticketing/order/valid
            - Method=POST
        - id: ticketing-service
          uri: lb://ticketing-service
          predicates:
            - Path=/api/v1/ticketing/order/subscribe/{paymentId}
        - id: ticketing-service
          uri: lb://ticketing-service
          predicates:
            - Path=/api/v1/ticketing/order/**
          filters:
            - AuthorizationHeaderFilter
        - id: ticketing-service
          uri: lb://ticketing-service
          predicates:
            - Path=/ticketing-swagger/v3/api-docs

encrypt:
  key-store:
    password: test1234
    alias: apiEncryptionKey
    location: classpath:/apiEncryptionKey.jks

management:
  endpoint:
    gateway:
      enabled: true

springdoc:
  swagger-ui:
    csrf:
      enabled: false
    urls:
      - name: user-service
        url: http://localhost:9000/user-swagger/v3/api-docs
      - name: admin-service
        url: http://localhost:9000/admin-swagger/v3/api-docs
      - name: event-service
        url: http://localhost:9000/event-swagger/v3/api-docs
      - name: ticketing-service
        url: http://localhost:9000/ticketing-swagger/v3/api-docs
      - name: queue-service
        url: http://localhost:9000/queue-swagger/v3/api-docs
      - name: face-service
        url: http://localhost:5000/api/v1/faces/swagger.json
    persistAuthorization: true
    use-root-path: true

